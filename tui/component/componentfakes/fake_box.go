// Code generated by counterfeiter. DO NOT EDIT.
package componentfakes

import (
	"sync"

	"github.com/dkyanakiev/vaulty/tui/component"
	tcell "github.com/gdamore/tcell/v2"
	"github.com/rivo/tview"
)

type FakeBox struct {
	PrimitiveStub        func() tview.Primitive
	primitiveMutex       sync.RWMutex
	primitiveArgsForCall []struct {
	}
	primitiveReturns struct {
		result1 tview.Primitive
	}
	primitiveReturnsOnCall map[int]struct {
		result1 tview.Primitive
	}
	SetBorderStub        func(bool) *tview.Box
	setBorderMutex       sync.RWMutex
	setBorderArgsForCall []struct {
		arg1 bool
	}
	setBorderReturns struct {
		result1 *tview.Box
	}
	setBorderReturnsOnCall map[int]struct {
		result1 *tview.Box
	}
	SetBorderColorStub        func(tcell.Color) *tview.Box
	setBorderColorMutex       sync.RWMutex
	setBorderColorArgsForCall []struct {
		arg1 tcell.Color
	}
	setBorderColorReturns struct {
		result1 *tview.Box
	}
	setBorderColorReturnsOnCall map[int]struct {
		result1 *tview.Box
	}
	SetTitleStub        func(string) *tview.Box
	setTitleMutex       sync.RWMutex
	setTitleArgsForCall []struct {
		arg1 string
	}
	setTitleReturns struct {
		result1 *tview.Box
	}
	setTitleReturnsOnCall map[int]struct {
		result1 *tview.Box
	}
	SetTitleColorStub        func(tcell.Color) *tview.Box
	setTitleColorMutex       sync.RWMutex
	setTitleColorArgsForCall []struct {
		arg1 tcell.Color
	}
	setTitleColorReturns struct {
		result1 *tview.Box
	}
	setTitleColorReturnsOnCall map[int]struct {
		result1 *tview.Box
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBox) Primitive() tview.Primitive {
	fake.primitiveMutex.Lock()
	ret, specificReturn := fake.primitiveReturnsOnCall[len(fake.primitiveArgsForCall)]
	fake.primitiveArgsForCall = append(fake.primitiveArgsForCall, struct {
	}{})
	stub := fake.PrimitiveStub
	fakeReturns := fake.primitiveReturns
	fake.recordInvocation("Primitive", []interface{}{})
	fake.primitiveMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBox) PrimitiveCallCount() int {
	fake.primitiveMutex.RLock()
	defer fake.primitiveMutex.RUnlock()
	return len(fake.primitiveArgsForCall)
}

func (fake *FakeBox) PrimitiveCalls(stub func() tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = stub
}

func (fake *FakeBox) PrimitiveReturns(result1 tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = nil
	fake.primitiveReturns = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeBox) PrimitiveReturnsOnCall(i int, result1 tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = nil
	if fake.primitiveReturnsOnCall == nil {
		fake.primitiveReturnsOnCall = make(map[int]struct {
			result1 tview.Primitive
		})
	}
	fake.primitiveReturnsOnCall[i] = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeBox) SetBorder(arg1 bool) *tview.Box {
	fake.setBorderMutex.Lock()
	ret, specificReturn := fake.setBorderReturnsOnCall[len(fake.setBorderArgsForCall)]
	fake.setBorderArgsForCall = append(fake.setBorderArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.SetBorderStub
	fakeReturns := fake.setBorderReturns
	fake.recordInvocation("SetBorder", []interface{}{arg1})
	fake.setBorderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBox) SetBorderCallCount() int {
	fake.setBorderMutex.RLock()
	defer fake.setBorderMutex.RUnlock()
	return len(fake.setBorderArgsForCall)
}

func (fake *FakeBox) SetBorderCalls(stub func(bool) *tview.Box) {
	fake.setBorderMutex.Lock()
	defer fake.setBorderMutex.Unlock()
	fake.SetBorderStub = stub
}

func (fake *FakeBox) SetBorderArgsForCall(i int) bool {
	fake.setBorderMutex.RLock()
	defer fake.setBorderMutex.RUnlock()
	argsForCall := fake.setBorderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBox) SetBorderReturns(result1 *tview.Box) {
	fake.setBorderMutex.Lock()
	defer fake.setBorderMutex.Unlock()
	fake.SetBorderStub = nil
	fake.setBorderReturns = struct {
		result1 *tview.Box
	}{result1}
}

func (fake *FakeBox) SetBorderReturnsOnCall(i int, result1 *tview.Box) {
	fake.setBorderMutex.Lock()
	defer fake.setBorderMutex.Unlock()
	fake.SetBorderStub = nil
	if fake.setBorderReturnsOnCall == nil {
		fake.setBorderReturnsOnCall = make(map[int]struct {
			result1 *tview.Box
		})
	}
	fake.setBorderReturnsOnCall[i] = struct {
		result1 *tview.Box
	}{result1}
}

func (fake *FakeBox) SetBorderColor(arg1 tcell.Color) *tview.Box {
	fake.setBorderColorMutex.Lock()
	ret, specificReturn := fake.setBorderColorReturnsOnCall[len(fake.setBorderColorArgsForCall)]
	fake.setBorderColorArgsForCall = append(fake.setBorderColorArgsForCall, struct {
		arg1 tcell.Color
	}{arg1})
	stub := fake.SetBorderColorStub
	fakeReturns := fake.setBorderColorReturns
	fake.recordInvocation("SetBorderColor", []interface{}{arg1})
	fake.setBorderColorMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBox) SetBorderColorCallCount() int {
	fake.setBorderColorMutex.RLock()
	defer fake.setBorderColorMutex.RUnlock()
	return len(fake.setBorderColorArgsForCall)
}

func (fake *FakeBox) SetBorderColorCalls(stub func(tcell.Color) *tview.Box) {
	fake.setBorderColorMutex.Lock()
	defer fake.setBorderColorMutex.Unlock()
	fake.SetBorderColorStub = stub
}

func (fake *FakeBox) SetBorderColorArgsForCall(i int) tcell.Color {
	fake.setBorderColorMutex.RLock()
	defer fake.setBorderColorMutex.RUnlock()
	argsForCall := fake.setBorderColorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBox) SetBorderColorReturns(result1 *tview.Box) {
	fake.setBorderColorMutex.Lock()
	defer fake.setBorderColorMutex.Unlock()
	fake.SetBorderColorStub = nil
	fake.setBorderColorReturns = struct {
		result1 *tview.Box
	}{result1}
}

func (fake *FakeBox) SetBorderColorReturnsOnCall(i int, result1 *tview.Box) {
	fake.setBorderColorMutex.Lock()
	defer fake.setBorderColorMutex.Unlock()
	fake.SetBorderColorStub = nil
	if fake.setBorderColorReturnsOnCall == nil {
		fake.setBorderColorReturnsOnCall = make(map[int]struct {
			result1 *tview.Box
		})
	}
	fake.setBorderColorReturnsOnCall[i] = struct {
		result1 *tview.Box
	}{result1}
}

func (fake *FakeBox) SetTitle(arg1 string) *tview.Box {
	fake.setTitleMutex.Lock()
	ret, specificReturn := fake.setTitleReturnsOnCall[len(fake.setTitleArgsForCall)]
	fake.setTitleArgsForCall = append(fake.setTitleArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetTitleStub
	fakeReturns := fake.setTitleReturns
	fake.recordInvocation("SetTitle", []interface{}{arg1})
	fake.setTitleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBox) SetTitleCallCount() int {
	fake.setTitleMutex.RLock()
	defer fake.setTitleMutex.RUnlock()
	return len(fake.setTitleArgsForCall)
}

func (fake *FakeBox) SetTitleCalls(stub func(string) *tview.Box) {
	fake.setTitleMutex.Lock()
	defer fake.setTitleMutex.Unlock()
	fake.SetTitleStub = stub
}

func (fake *FakeBox) SetTitleArgsForCall(i int) string {
	fake.setTitleMutex.RLock()
	defer fake.setTitleMutex.RUnlock()
	argsForCall := fake.setTitleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBox) SetTitleReturns(result1 *tview.Box) {
	fake.setTitleMutex.Lock()
	defer fake.setTitleMutex.Unlock()
	fake.SetTitleStub = nil
	fake.setTitleReturns = struct {
		result1 *tview.Box
	}{result1}
}

func (fake *FakeBox) SetTitleReturnsOnCall(i int, result1 *tview.Box) {
	fake.setTitleMutex.Lock()
	defer fake.setTitleMutex.Unlock()
	fake.SetTitleStub = nil
	if fake.setTitleReturnsOnCall == nil {
		fake.setTitleReturnsOnCall = make(map[int]struct {
			result1 *tview.Box
		})
	}
	fake.setTitleReturnsOnCall[i] = struct {
		result1 *tview.Box
	}{result1}
}

func (fake *FakeBox) SetTitleColor(arg1 tcell.Color) *tview.Box {
	fake.setTitleColorMutex.Lock()
	ret, specificReturn := fake.setTitleColorReturnsOnCall[len(fake.setTitleColorArgsForCall)]
	fake.setTitleColorArgsForCall = append(fake.setTitleColorArgsForCall, struct {
		arg1 tcell.Color
	}{arg1})
	stub := fake.SetTitleColorStub
	fakeReturns := fake.setTitleColorReturns
	fake.recordInvocation("SetTitleColor", []interface{}{arg1})
	fake.setTitleColorMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBox) SetTitleColorCallCount() int {
	fake.setTitleColorMutex.RLock()
	defer fake.setTitleColorMutex.RUnlock()
	return len(fake.setTitleColorArgsForCall)
}

func (fake *FakeBox) SetTitleColorCalls(stub func(tcell.Color) *tview.Box) {
	fake.setTitleColorMutex.Lock()
	defer fake.setTitleColorMutex.Unlock()
	fake.SetTitleColorStub = stub
}

func (fake *FakeBox) SetTitleColorArgsForCall(i int) tcell.Color {
	fake.setTitleColorMutex.RLock()
	defer fake.setTitleColorMutex.RUnlock()
	argsForCall := fake.setTitleColorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBox) SetTitleColorReturns(result1 *tview.Box) {
	fake.setTitleColorMutex.Lock()
	defer fake.setTitleColorMutex.Unlock()
	fake.SetTitleColorStub = nil
	fake.setTitleColorReturns = struct {
		result1 *tview.Box
	}{result1}
}

func (fake *FakeBox) SetTitleColorReturnsOnCall(i int, result1 *tview.Box) {
	fake.setTitleColorMutex.Lock()
	defer fake.setTitleColorMutex.Unlock()
	fake.SetTitleColorStub = nil
	if fake.setTitleColorReturnsOnCall == nil {
		fake.setTitleColorReturnsOnCall = make(map[int]struct {
			result1 *tview.Box
		})
	}
	fake.setTitleColorReturnsOnCall[i] = struct {
		result1 *tview.Box
	}{result1}
}

func (fake *FakeBox) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.primitiveMutex.RLock()
	defer fake.primitiveMutex.RUnlock()
	fake.setBorderMutex.RLock()
	defer fake.setBorderMutex.RUnlock()
	fake.setBorderColorMutex.RLock()
	defer fake.setBorderColorMutex.RUnlock()
	fake.setTitleMutex.RLock()
	defer fake.setTitleMutex.RUnlock()
	fake.setTitleColorMutex.RLock()
	defer fake.setTitleColorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBox) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ component.Box = new(FakeBox)
