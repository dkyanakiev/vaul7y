// Code generated by counterfeiter. DO NOT EDIT.
package componentfakes

import (
	"sync"

	"github.com/dkyanakiev/vaulty/tui/component"
	"github.com/rivo/tview"
)

type FakeTextArea struct {
	GetCursorStub        func() (int, int, int, int)
	getCursorMutex       sync.RWMutex
	getCursorArgsForCall []struct {
	}
	getCursorReturns struct {
		result1 int
		result2 int
		result3 int
		result4 int
	}
	getCursorReturnsOnCall map[int]struct {
		result1 int
		result2 int
		result3 int
		result4 int
	}
	PrimitiveStub        func() tview.Primitive
	primitiveMutex       sync.RWMutex
	primitiveArgsForCall []struct {
	}
	primitiveReturns struct {
		result1 tview.Primitive
	}
	primitiveReturnsOnCall map[int]struct {
		result1 tview.Primitive
	}
	SetMovedFuncStub        func(func()) *tview.TextArea
	setMovedFuncMutex       sync.RWMutex
	setMovedFuncArgsForCall []struct {
		arg1 func()
	}
	setMovedFuncReturns struct {
		result1 *tview.TextArea
	}
	setMovedFuncReturnsOnCall map[int]struct {
		result1 *tview.TextArea
	}
	SetTextStub        func(string, bool) *tview.TextArea
	setTextMutex       sync.RWMutex
	setTextArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	setTextReturns struct {
		result1 *tview.TextArea
	}
	setTextReturnsOnCall map[int]struct {
		result1 *tview.TextArea
	}
	SetWrapStub        func(bool) *tview.TextArea
	setWrapMutex       sync.RWMutex
	setWrapArgsForCall []struct {
		arg1 bool
	}
	setWrapReturns struct {
		result1 *tview.TextArea
	}
	setWrapReturnsOnCall map[int]struct {
		result1 *tview.TextArea
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTextArea) GetCursor() (int, int, int, int) {
	fake.getCursorMutex.Lock()
	ret, specificReturn := fake.getCursorReturnsOnCall[len(fake.getCursorArgsForCall)]
	fake.getCursorArgsForCall = append(fake.getCursorArgsForCall, struct {
	}{})
	stub := fake.GetCursorStub
	fakeReturns := fake.getCursorReturns
	fake.recordInvocation("GetCursor", []interface{}{})
	fake.getCursorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *FakeTextArea) GetCursorCallCount() int {
	fake.getCursorMutex.RLock()
	defer fake.getCursorMutex.RUnlock()
	return len(fake.getCursorArgsForCall)
}

func (fake *FakeTextArea) GetCursorCalls(stub func() (int, int, int, int)) {
	fake.getCursorMutex.Lock()
	defer fake.getCursorMutex.Unlock()
	fake.GetCursorStub = stub
}

func (fake *FakeTextArea) GetCursorReturns(result1 int, result2 int, result3 int, result4 int) {
	fake.getCursorMutex.Lock()
	defer fake.getCursorMutex.Unlock()
	fake.GetCursorStub = nil
	fake.getCursorReturns = struct {
		result1 int
		result2 int
		result3 int
		result4 int
	}{result1, result2, result3, result4}
}

func (fake *FakeTextArea) GetCursorReturnsOnCall(i int, result1 int, result2 int, result3 int, result4 int) {
	fake.getCursorMutex.Lock()
	defer fake.getCursorMutex.Unlock()
	fake.GetCursorStub = nil
	if fake.getCursorReturnsOnCall == nil {
		fake.getCursorReturnsOnCall = make(map[int]struct {
			result1 int
			result2 int
			result3 int
			result4 int
		})
	}
	fake.getCursorReturnsOnCall[i] = struct {
		result1 int
		result2 int
		result3 int
		result4 int
	}{result1, result2, result3, result4}
}

func (fake *FakeTextArea) Primitive() tview.Primitive {
	fake.primitiveMutex.Lock()
	ret, specificReturn := fake.primitiveReturnsOnCall[len(fake.primitiveArgsForCall)]
	fake.primitiveArgsForCall = append(fake.primitiveArgsForCall, struct {
	}{})
	stub := fake.PrimitiveStub
	fakeReturns := fake.primitiveReturns
	fake.recordInvocation("Primitive", []interface{}{})
	fake.primitiveMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTextArea) PrimitiveCallCount() int {
	fake.primitiveMutex.RLock()
	defer fake.primitiveMutex.RUnlock()
	return len(fake.primitiveArgsForCall)
}

func (fake *FakeTextArea) PrimitiveCalls(stub func() tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = stub
}

func (fake *FakeTextArea) PrimitiveReturns(result1 tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = nil
	fake.primitiveReturns = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeTextArea) PrimitiveReturnsOnCall(i int, result1 tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = nil
	if fake.primitiveReturnsOnCall == nil {
		fake.primitiveReturnsOnCall = make(map[int]struct {
			result1 tview.Primitive
		})
	}
	fake.primitiveReturnsOnCall[i] = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeTextArea) SetMovedFunc(arg1 func()) *tview.TextArea {
	fake.setMovedFuncMutex.Lock()
	ret, specificReturn := fake.setMovedFuncReturnsOnCall[len(fake.setMovedFuncArgsForCall)]
	fake.setMovedFuncArgsForCall = append(fake.setMovedFuncArgsForCall, struct {
		arg1 func()
	}{arg1})
	stub := fake.SetMovedFuncStub
	fakeReturns := fake.setMovedFuncReturns
	fake.recordInvocation("SetMovedFunc", []interface{}{arg1})
	fake.setMovedFuncMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTextArea) SetMovedFuncCallCount() int {
	fake.setMovedFuncMutex.RLock()
	defer fake.setMovedFuncMutex.RUnlock()
	return len(fake.setMovedFuncArgsForCall)
}

func (fake *FakeTextArea) SetMovedFuncCalls(stub func(func()) *tview.TextArea) {
	fake.setMovedFuncMutex.Lock()
	defer fake.setMovedFuncMutex.Unlock()
	fake.SetMovedFuncStub = stub
}

func (fake *FakeTextArea) SetMovedFuncArgsForCall(i int) func() {
	fake.setMovedFuncMutex.RLock()
	defer fake.setMovedFuncMutex.RUnlock()
	argsForCall := fake.setMovedFuncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTextArea) SetMovedFuncReturns(result1 *tview.TextArea) {
	fake.setMovedFuncMutex.Lock()
	defer fake.setMovedFuncMutex.Unlock()
	fake.SetMovedFuncStub = nil
	fake.setMovedFuncReturns = struct {
		result1 *tview.TextArea
	}{result1}
}

func (fake *FakeTextArea) SetMovedFuncReturnsOnCall(i int, result1 *tview.TextArea) {
	fake.setMovedFuncMutex.Lock()
	defer fake.setMovedFuncMutex.Unlock()
	fake.SetMovedFuncStub = nil
	if fake.setMovedFuncReturnsOnCall == nil {
		fake.setMovedFuncReturnsOnCall = make(map[int]struct {
			result1 *tview.TextArea
		})
	}
	fake.setMovedFuncReturnsOnCall[i] = struct {
		result1 *tview.TextArea
	}{result1}
}

func (fake *FakeTextArea) SetText(arg1 string, arg2 bool) *tview.TextArea {
	fake.setTextMutex.Lock()
	ret, specificReturn := fake.setTextReturnsOnCall[len(fake.setTextArgsForCall)]
	fake.setTextArgsForCall = append(fake.setTextArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	stub := fake.SetTextStub
	fakeReturns := fake.setTextReturns
	fake.recordInvocation("SetText", []interface{}{arg1, arg2})
	fake.setTextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTextArea) SetTextCallCount() int {
	fake.setTextMutex.RLock()
	defer fake.setTextMutex.RUnlock()
	return len(fake.setTextArgsForCall)
}

func (fake *FakeTextArea) SetTextCalls(stub func(string, bool) *tview.TextArea) {
	fake.setTextMutex.Lock()
	defer fake.setTextMutex.Unlock()
	fake.SetTextStub = stub
}

func (fake *FakeTextArea) SetTextArgsForCall(i int) (string, bool) {
	fake.setTextMutex.RLock()
	defer fake.setTextMutex.RUnlock()
	argsForCall := fake.setTextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTextArea) SetTextReturns(result1 *tview.TextArea) {
	fake.setTextMutex.Lock()
	defer fake.setTextMutex.Unlock()
	fake.SetTextStub = nil
	fake.setTextReturns = struct {
		result1 *tview.TextArea
	}{result1}
}

func (fake *FakeTextArea) SetTextReturnsOnCall(i int, result1 *tview.TextArea) {
	fake.setTextMutex.Lock()
	defer fake.setTextMutex.Unlock()
	fake.SetTextStub = nil
	if fake.setTextReturnsOnCall == nil {
		fake.setTextReturnsOnCall = make(map[int]struct {
			result1 *tview.TextArea
		})
	}
	fake.setTextReturnsOnCall[i] = struct {
		result1 *tview.TextArea
	}{result1}
}

func (fake *FakeTextArea) SetWrap(arg1 bool) *tview.TextArea {
	fake.setWrapMutex.Lock()
	ret, specificReturn := fake.setWrapReturnsOnCall[len(fake.setWrapArgsForCall)]
	fake.setWrapArgsForCall = append(fake.setWrapArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.SetWrapStub
	fakeReturns := fake.setWrapReturns
	fake.recordInvocation("SetWrap", []interface{}{arg1})
	fake.setWrapMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTextArea) SetWrapCallCount() int {
	fake.setWrapMutex.RLock()
	defer fake.setWrapMutex.RUnlock()
	return len(fake.setWrapArgsForCall)
}

func (fake *FakeTextArea) SetWrapCalls(stub func(bool) *tview.TextArea) {
	fake.setWrapMutex.Lock()
	defer fake.setWrapMutex.Unlock()
	fake.SetWrapStub = stub
}

func (fake *FakeTextArea) SetWrapArgsForCall(i int) bool {
	fake.setWrapMutex.RLock()
	defer fake.setWrapMutex.RUnlock()
	argsForCall := fake.setWrapArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTextArea) SetWrapReturns(result1 *tview.TextArea) {
	fake.setWrapMutex.Lock()
	defer fake.setWrapMutex.Unlock()
	fake.SetWrapStub = nil
	fake.setWrapReturns = struct {
		result1 *tview.TextArea
	}{result1}
}

func (fake *FakeTextArea) SetWrapReturnsOnCall(i int, result1 *tview.TextArea) {
	fake.setWrapMutex.Lock()
	defer fake.setWrapMutex.Unlock()
	fake.SetWrapStub = nil
	if fake.setWrapReturnsOnCall == nil {
		fake.setWrapReturnsOnCall = make(map[int]struct {
			result1 *tview.TextArea
		})
	}
	fake.setWrapReturnsOnCall[i] = struct {
		result1 *tview.TextArea
	}{result1}
}

func (fake *FakeTextArea) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCursorMutex.RLock()
	defer fake.getCursorMutex.RUnlock()
	fake.primitiveMutex.RLock()
	defer fake.primitiveMutex.RUnlock()
	fake.setMovedFuncMutex.RLock()
	defer fake.setMovedFuncMutex.RUnlock()
	fake.setTextMutex.RLock()
	defer fake.setTextMutex.RUnlock()
	fake.setWrapMutex.RLock()
	defer fake.setWrapMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTextArea) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ component.TextArea = new(FakeTextArea)
