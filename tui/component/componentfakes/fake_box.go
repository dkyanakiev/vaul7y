// Code generated by counterfeiter. DO NOT EDIT.
package componentfakes

import (
	"sync"

	"github.com/dkyanakiev/vaulty/tui/component"
	"github.com/rivo/tview"
)

type FakeBox struct {
	AddItemStub        func(tview.Primitive, int, int, bool) *tview.Box
	addItemMutex       sync.RWMutex
	addItemArgsForCall []struct {
		arg1 tview.Primitive
		arg2 int
		arg3 int
		arg4 bool
	}
	addItemReturns struct {
		result1 *tview.Box
	}
	addItemReturnsOnCall map[int]struct {
		result1 *tview.Box
	}
	PrimitiveStub        func() tview.Primitive
	primitiveMutex       sync.RWMutex
	primitiveArgsForCall []struct {
	}
	primitiveReturns struct {
		result1 tview.Primitive
	}
	primitiveReturnsOnCall map[int]struct {
		result1 tview.Primitive
	}
	SetBorderStub        func(bool) *tview.Box
	setBorderMutex       sync.RWMutex
	setBorderArgsForCall []struct {
		arg1 bool
	}
	setBorderReturns struct {
		result1 *tview.Box
	}
	setBorderReturnsOnCall map[int]struct {
		result1 *tview.Box
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBox) AddItem(arg1 tview.Primitive, arg2 int, arg3 int, arg4 bool) *tview.Box {
	fake.addItemMutex.Lock()
	ret, specificReturn := fake.addItemReturnsOnCall[len(fake.addItemArgsForCall)]
	fake.addItemArgsForCall = append(fake.addItemArgsForCall, struct {
		arg1 tview.Primitive
		arg2 int
		arg3 int
		arg4 bool
	}{arg1, arg2, arg3, arg4})
	stub := fake.AddItemStub
	fakeReturns := fake.addItemReturns
	fake.recordInvocation("AddItem", []interface{}{arg1, arg2, arg3, arg4})
	fake.addItemMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBox) AddItemCallCount() int {
	fake.addItemMutex.RLock()
	defer fake.addItemMutex.RUnlock()
	return len(fake.addItemArgsForCall)
}

func (fake *FakeBox) AddItemCalls(stub func(tview.Primitive, int, int, bool) *tview.Box) {
	fake.addItemMutex.Lock()
	defer fake.addItemMutex.Unlock()
	fake.AddItemStub = stub
}

func (fake *FakeBox) AddItemArgsForCall(i int) (tview.Primitive, int, int, bool) {
	fake.addItemMutex.RLock()
	defer fake.addItemMutex.RUnlock()
	argsForCall := fake.addItemArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeBox) AddItemReturns(result1 *tview.Box) {
	fake.addItemMutex.Lock()
	defer fake.addItemMutex.Unlock()
	fake.AddItemStub = nil
	fake.addItemReturns = struct {
		result1 *tview.Box
	}{result1}
}

func (fake *FakeBox) AddItemReturnsOnCall(i int, result1 *tview.Box) {
	fake.addItemMutex.Lock()
	defer fake.addItemMutex.Unlock()
	fake.AddItemStub = nil
	if fake.addItemReturnsOnCall == nil {
		fake.addItemReturnsOnCall = make(map[int]struct {
			result1 *tview.Box
		})
	}
	fake.addItemReturnsOnCall[i] = struct {
		result1 *tview.Box
	}{result1}
}

func (fake *FakeBox) Primitive() tview.Primitive {
	fake.primitiveMutex.Lock()
	ret, specificReturn := fake.primitiveReturnsOnCall[len(fake.primitiveArgsForCall)]
	fake.primitiveArgsForCall = append(fake.primitiveArgsForCall, struct {
	}{})
	stub := fake.PrimitiveStub
	fakeReturns := fake.primitiveReturns
	fake.recordInvocation("Primitive", []interface{}{})
	fake.primitiveMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBox) PrimitiveCallCount() int {
	fake.primitiveMutex.RLock()
	defer fake.primitiveMutex.RUnlock()
	return len(fake.primitiveArgsForCall)
}

func (fake *FakeBox) PrimitiveCalls(stub func() tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = stub
}

func (fake *FakeBox) PrimitiveReturns(result1 tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = nil
	fake.primitiveReturns = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeBox) PrimitiveReturnsOnCall(i int, result1 tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = nil
	if fake.primitiveReturnsOnCall == nil {
		fake.primitiveReturnsOnCall = make(map[int]struct {
			result1 tview.Primitive
		})
	}
	fake.primitiveReturnsOnCall[i] = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeBox) SetBorder(arg1 bool) *tview.Box {
	fake.setBorderMutex.Lock()
	ret, specificReturn := fake.setBorderReturnsOnCall[len(fake.setBorderArgsForCall)]
	fake.setBorderArgsForCall = append(fake.setBorderArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.SetBorderStub
	fakeReturns := fake.setBorderReturns
	fake.recordInvocation("SetBorder", []interface{}{arg1})
	fake.setBorderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBox) SetBorderCallCount() int {
	fake.setBorderMutex.RLock()
	defer fake.setBorderMutex.RUnlock()
	return len(fake.setBorderArgsForCall)
}

func (fake *FakeBox) SetBorderCalls(stub func(bool) *tview.Box) {
	fake.setBorderMutex.Lock()
	defer fake.setBorderMutex.Unlock()
	fake.SetBorderStub = stub
}

func (fake *FakeBox) SetBorderArgsForCall(i int) bool {
	fake.setBorderMutex.RLock()
	defer fake.setBorderMutex.RUnlock()
	argsForCall := fake.setBorderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBox) SetBorderReturns(result1 *tview.Box) {
	fake.setBorderMutex.Lock()
	defer fake.setBorderMutex.Unlock()
	fake.SetBorderStub = nil
	fake.setBorderReturns = struct {
		result1 *tview.Box
	}{result1}
}

func (fake *FakeBox) SetBorderReturnsOnCall(i int, result1 *tview.Box) {
	fake.setBorderMutex.Lock()
	defer fake.setBorderMutex.Unlock()
	fake.SetBorderStub = nil
	if fake.setBorderReturnsOnCall == nil {
		fake.setBorderReturnsOnCall = make(map[int]struct {
			result1 *tview.Box
		})
	}
	fake.setBorderReturnsOnCall[i] = struct {
		result1 *tview.Box
	}{result1}
}

func (fake *FakeBox) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addItemMutex.RLock()
	defer fake.addItemMutex.RUnlock()
	fake.primitiveMutex.RLock()
	defer fake.primitiveMutex.RUnlock()
	fake.setBorderMutex.RLock()
	defer fake.setBorderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBox) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ component.Box = new(FakeBox)
