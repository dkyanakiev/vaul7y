// Code generated by counterfeiter. DO NOT EDIT.
package componentfakes

import (
	"sync"

	"github.com/dkyanakiev/vaulty/component"
	"github.com/dkyanakiev/vaulty/primitives"
	"github.com/rivo/tview"
)

type FakeSelector struct {
	ContainerStub        func() tview.Primitive
	containerMutex       sync.RWMutex
	containerArgsForCall []struct {
	}
	containerReturns struct {
		result1 tview.Primitive
	}
	containerReturnsOnCall map[int]struct {
		result1 tview.Primitive
	}
	GetTableStub        func() *primitives.Table
	getTableMutex       sync.RWMutex
	getTableArgsForCall []struct {
	}
	getTableReturns struct {
		result1 *primitives.Table
	}
	getTableReturnsOnCall map[int]struct {
		result1 *primitives.Table
	}
	PrimitiveStub        func() tview.Primitive
	primitiveMutex       sync.RWMutex
	primitiveArgsForCall []struct {
	}
	primitiveReturns struct {
		result1 tview.Primitive
	}
	primitiveReturnsOnCall map[int]struct {
		result1 tview.Primitive
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSelector) Container() tview.Primitive {
	fake.containerMutex.Lock()
	ret, specificReturn := fake.containerReturnsOnCall[len(fake.containerArgsForCall)]
	fake.containerArgsForCall = append(fake.containerArgsForCall, struct {
	}{})
	stub := fake.ContainerStub
	fakeReturns := fake.containerReturns
	fake.recordInvocation("Container", []interface{}{})
	fake.containerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSelector) ContainerCallCount() int {
	fake.containerMutex.RLock()
	defer fake.containerMutex.RUnlock()
	return len(fake.containerArgsForCall)
}

func (fake *FakeSelector) ContainerCalls(stub func() tview.Primitive) {
	fake.containerMutex.Lock()
	defer fake.containerMutex.Unlock()
	fake.ContainerStub = stub
}

func (fake *FakeSelector) ContainerReturns(result1 tview.Primitive) {
	fake.containerMutex.Lock()
	defer fake.containerMutex.Unlock()
	fake.ContainerStub = nil
	fake.containerReturns = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeSelector) ContainerReturnsOnCall(i int, result1 tview.Primitive) {
	fake.containerMutex.Lock()
	defer fake.containerMutex.Unlock()
	fake.ContainerStub = nil
	if fake.containerReturnsOnCall == nil {
		fake.containerReturnsOnCall = make(map[int]struct {
			result1 tview.Primitive
		})
	}
	fake.containerReturnsOnCall[i] = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeSelector) GetTable() *primitives.Table {
	fake.getTableMutex.Lock()
	ret, specificReturn := fake.getTableReturnsOnCall[len(fake.getTableArgsForCall)]
	fake.getTableArgsForCall = append(fake.getTableArgsForCall, struct {
	}{})
	stub := fake.GetTableStub
	fakeReturns := fake.getTableReturns
	fake.recordInvocation("GetTable", []interface{}{})
	fake.getTableMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSelector) GetTableCallCount() int {
	fake.getTableMutex.RLock()
	defer fake.getTableMutex.RUnlock()
	return len(fake.getTableArgsForCall)
}

func (fake *FakeSelector) GetTableCalls(stub func() *primitives.Table) {
	fake.getTableMutex.Lock()
	defer fake.getTableMutex.Unlock()
	fake.GetTableStub = stub
}

func (fake *FakeSelector) GetTableReturns(result1 *primitives.Table) {
	fake.getTableMutex.Lock()
	defer fake.getTableMutex.Unlock()
	fake.GetTableStub = nil
	fake.getTableReturns = struct {
		result1 *primitives.Table
	}{result1}
}

func (fake *FakeSelector) GetTableReturnsOnCall(i int, result1 *primitives.Table) {
	fake.getTableMutex.Lock()
	defer fake.getTableMutex.Unlock()
	fake.GetTableStub = nil
	if fake.getTableReturnsOnCall == nil {
		fake.getTableReturnsOnCall = make(map[int]struct {
			result1 *primitives.Table
		})
	}
	fake.getTableReturnsOnCall[i] = struct {
		result1 *primitives.Table
	}{result1}
}

func (fake *FakeSelector) Primitive() tview.Primitive {
	fake.primitiveMutex.Lock()
	ret, specificReturn := fake.primitiveReturnsOnCall[len(fake.primitiveArgsForCall)]
	fake.primitiveArgsForCall = append(fake.primitiveArgsForCall, struct {
	}{})
	stub := fake.PrimitiveStub
	fakeReturns := fake.primitiveReturns
	fake.recordInvocation("Primitive", []interface{}{})
	fake.primitiveMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSelector) PrimitiveCallCount() int {
	fake.primitiveMutex.RLock()
	defer fake.primitiveMutex.RUnlock()
	return len(fake.primitiveArgsForCall)
}

func (fake *FakeSelector) PrimitiveCalls(stub func() tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = stub
}

func (fake *FakeSelector) PrimitiveReturns(result1 tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = nil
	fake.primitiveReturns = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeSelector) PrimitiveReturnsOnCall(i int, result1 tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = nil
	if fake.primitiveReturnsOnCall == nil {
		fake.primitiveReturnsOnCall = make(map[int]struct {
			result1 tview.Primitive
		})
	}
	fake.primitiveReturnsOnCall[i] = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeSelector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.containerMutex.RLock()
	defer fake.containerMutex.RUnlock()
	fake.getTableMutex.RLock()
	defer fake.getTableMutex.RUnlock()
	fake.primitiveMutex.RLock()
	defer fake.primitiveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSelector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ component.Selector = new(FakeSelector)
