// Code generated by counterfeiter. DO NOT EDIT.
package componentfakes

import (
	"sync"

	"github.com/dkyanakiev/vaulty/tui/component"
	"github.com/rivo/tview"
)

type FakeModal struct {
	ContainerStub        func() tview.Primitive
	containerMutex       sync.RWMutex
	containerArgsForCall []struct {
	}
	containerReturns struct {
		result1 tview.Primitive
	}
	containerReturnsOnCall map[int]struct {
		result1 tview.Primitive
	}
	PrimitiveStub        func() tview.Primitive
	primitiveMutex       sync.RWMutex
	primitiveArgsForCall []struct {
	}
	primitiveReturns struct {
		result1 tview.Primitive
	}
	primitiveReturnsOnCall map[int]struct {
		result1 tview.Primitive
	}
	SetDoneFuncStub        func(func(buttonIndex int, buttonLabel string))
	setDoneFuncMutex       sync.RWMutex
	setDoneFuncArgsForCall []struct {
		arg1 func(buttonIndex int, buttonLabel string)
	}
	SetFocusStub        func(int)
	setFocusMutex       sync.RWMutex
	setFocusArgsForCall []struct {
		arg1 int
	}
	SetTextStub        func(string)
	setTextMutex       sync.RWMutex
	setTextArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeModal) Container() tview.Primitive {
	fake.containerMutex.Lock()
	ret, specificReturn := fake.containerReturnsOnCall[len(fake.containerArgsForCall)]
	fake.containerArgsForCall = append(fake.containerArgsForCall, struct {
	}{})
	stub := fake.ContainerStub
	fakeReturns := fake.containerReturns
	fake.recordInvocation("Container", []interface{}{})
	fake.containerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeModal) ContainerCallCount() int {
	fake.containerMutex.RLock()
	defer fake.containerMutex.RUnlock()
	return len(fake.containerArgsForCall)
}

func (fake *FakeModal) ContainerCalls(stub func() tview.Primitive) {
	fake.containerMutex.Lock()
	defer fake.containerMutex.Unlock()
	fake.ContainerStub = stub
}

func (fake *FakeModal) ContainerReturns(result1 tview.Primitive) {
	fake.containerMutex.Lock()
	defer fake.containerMutex.Unlock()
	fake.ContainerStub = nil
	fake.containerReturns = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeModal) ContainerReturnsOnCall(i int, result1 tview.Primitive) {
	fake.containerMutex.Lock()
	defer fake.containerMutex.Unlock()
	fake.ContainerStub = nil
	if fake.containerReturnsOnCall == nil {
		fake.containerReturnsOnCall = make(map[int]struct {
			result1 tview.Primitive
		})
	}
	fake.containerReturnsOnCall[i] = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeModal) Primitive() tview.Primitive {
	fake.primitiveMutex.Lock()
	ret, specificReturn := fake.primitiveReturnsOnCall[len(fake.primitiveArgsForCall)]
	fake.primitiveArgsForCall = append(fake.primitiveArgsForCall, struct {
	}{})
	stub := fake.PrimitiveStub
	fakeReturns := fake.primitiveReturns
	fake.recordInvocation("Primitive", []interface{}{})
	fake.primitiveMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeModal) PrimitiveCallCount() int {
	fake.primitiveMutex.RLock()
	defer fake.primitiveMutex.RUnlock()
	return len(fake.primitiveArgsForCall)
}

func (fake *FakeModal) PrimitiveCalls(stub func() tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = stub
}

func (fake *FakeModal) PrimitiveReturns(result1 tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = nil
	fake.primitiveReturns = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeModal) PrimitiveReturnsOnCall(i int, result1 tview.Primitive) {
	fake.primitiveMutex.Lock()
	defer fake.primitiveMutex.Unlock()
	fake.PrimitiveStub = nil
	if fake.primitiveReturnsOnCall == nil {
		fake.primitiveReturnsOnCall = make(map[int]struct {
			result1 tview.Primitive
		})
	}
	fake.primitiveReturnsOnCall[i] = struct {
		result1 tview.Primitive
	}{result1}
}

func (fake *FakeModal) SetDoneFunc(arg1 func(buttonIndex int, buttonLabel string)) {
	fake.setDoneFuncMutex.Lock()
	fake.setDoneFuncArgsForCall = append(fake.setDoneFuncArgsForCall, struct {
		arg1 func(buttonIndex int, buttonLabel string)
	}{arg1})
	stub := fake.SetDoneFuncStub
	fake.recordInvocation("SetDoneFunc", []interface{}{arg1})
	fake.setDoneFuncMutex.Unlock()
	if stub != nil {
		fake.SetDoneFuncStub(arg1)
	}
}

func (fake *FakeModal) SetDoneFuncCallCount() int {
	fake.setDoneFuncMutex.RLock()
	defer fake.setDoneFuncMutex.RUnlock()
	return len(fake.setDoneFuncArgsForCall)
}

func (fake *FakeModal) SetDoneFuncCalls(stub func(func(buttonIndex int, buttonLabel string))) {
	fake.setDoneFuncMutex.Lock()
	defer fake.setDoneFuncMutex.Unlock()
	fake.SetDoneFuncStub = stub
}

func (fake *FakeModal) SetDoneFuncArgsForCall(i int) func(buttonIndex int, buttonLabel string) {
	fake.setDoneFuncMutex.RLock()
	defer fake.setDoneFuncMutex.RUnlock()
	argsForCall := fake.setDoneFuncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeModal) SetFocus(arg1 int) {
	fake.setFocusMutex.Lock()
	fake.setFocusArgsForCall = append(fake.setFocusArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetFocusStub
	fake.recordInvocation("SetFocus", []interface{}{arg1})
	fake.setFocusMutex.Unlock()
	if stub != nil {
		fake.SetFocusStub(arg1)
	}
}

func (fake *FakeModal) SetFocusCallCount() int {
	fake.setFocusMutex.RLock()
	defer fake.setFocusMutex.RUnlock()
	return len(fake.setFocusArgsForCall)
}

func (fake *FakeModal) SetFocusCalls(stub func(int)) {
	fake.setFocusMutex.Lock()
	defer fake.setFocusMutex.Unlock()
	fake.SetFocusStub = stub
}

func (fake *FakeModal) SetFocusArgsForCall(i int) int {
	fake.setFocusMutex.RLock()
	defer fake.setFocusMutex.RUnlock()
	argsForCall := fake.setFocusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeModal) SetText(arg1 string) {
	fake.setTextMutex.Lock()
	fake.setTextArgsForCall = append(fake.setTextArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetTextStub
	fake.recordInvocation("SetText", []interface{}{arg1})
	fake.setTextMutex.Unlock()
	if stub != nil {
		fake.SetTextStub(arg1)
	}
}

func (fake *FakeModal) SetTextCallCount() int {
	fake.setTextMutex.RLock()
	defer fake.setTextMutex.RUnlock()
	return len(fake.setTextArgsForCall)
}

func (fake *FakeModal) SetTextCalls(stub func(string)) {
	fake.setTextMutex.Lock()
	defer fake.setTextMutex.Unlock()
	fake.SetTextStub = stub
}

func (fake *FakeModal) SetTextArgsForCall(i int) string {
	fake.setTextMutex.RLock()
	defer fake.setTextMutex.RUnlock()
	argsForCall := fake.setTextArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeModal) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.containerMutex.RLock()
	defer fake.containerMutex.RUnlock()
	fake.primitiveMutex.RLock()
	defer fake.primitiveMutex.RUnlock()
	fake.setDoneFuncMutex.RLock()
	defer fake.setDoneFuncMutex.RUnlock()
	fake.setFocusMutex.RLock()
	defer fake.setFocusMutex.RUnlock()
	fake.setTextMutex.RLock()
	defer fake.setTextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeModal) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ component.Modal = new(FakeModal)
