// Code generated by counterfeiter. DO NOT EDIT.
package watcherfakes

import (
	"sync"

	"github.com/dkyanakiev/vaulty/watcher"
)

type FakeActivities struct {
	AddStub        func(chan struct{})
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 chan struct{}
	}
	DeactivateAllStub        func()
	deactivateAllMutex       sync.RWMutex
	deactivateAllArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeActivities) Add(arg1 chan struct{}) {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 chan struct{}
	}{arg1})
	stub := fake.AddStub
	fake.recordInvocation("Add", []interface{}{arg1})
	fake.addMutex.Unlock()
	if stub != nil {
		fake.AddStub(arg1)
	}
}

func (fake *FakeActivities) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeActivities) AddCalls(stub func(chan struct{})) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeActivities) AddArgsForCall(i int) chan struct{} {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeActivities) DeactivateAll() {
	fake.deactivateAllMutex.Lock()
	fake.deactivateAllArgsForCall = append(fake.deactivateAllArgsForCall, struct {
	}{})
	stub := fake.DeactivateAllStub
	fake.recordInvocation("DeactivateAll", []interface{}{})
	fake.deactivateAllMutex.Unlock()
	if stub != nil {
		fake.DeactivateAllStub()
	}
}

func (fake *FakeActivities) DeactivateAllCallCount() int {
	fake.deactivateAllMutex.RLock()
	defer fake.deactivateAllMutex.RUnlock()
	return len(fake.deactivateAllArgsForCall)
}

func (fake *FakeActivities) DeactivateAllCalls(stub func()) {
	fake.deactivateAllMutex.Lock()
	defer fake.deactivateAllMutex.Unlock()
	fake.DeactivateAllStub = stub
}

func (fake *FakeActivities) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.deactivateAllMutex.RLock()
	defer fake.deactivateAllMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeActivities) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ watcher.Activities = new(FakeActivities)
